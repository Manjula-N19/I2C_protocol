
TWI_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000009de  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000a92  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000f0  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b0c  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004f5  00000000  00000000  000016ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000054b  00000000  00000000  00001bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000200  00000000  00000000  0000212c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002b6  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000005af  00000000  00000000  000025e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b0  00000000  00000000  00002b91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 34       	cpi	r26, 0x40	; 64
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  9e:	0c 94 ed 04 	jmp	0x9da	; 0x9da <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Init>:

#include "I2C.h"		// I2C header file

void I2C_Init(void){
	
	TWSR = 0;		//Status register set to zero
  a6:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = (uint8_t)((F_CPU/SCL_CLOCK)-16)/2;   // Calculate the TWBR value
  aa:	88 e4       	ldi	r24, 0x48	; 72
  ac:	80 93 b8 00 	sts	0x00B8, r24
  b0:	08 95       	ret

000000b2 <I2C_start>:
}

void I2C_start(unsigned char address){			// this function is used for repeat start while reading data
	
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);  // enable interrupt, enable I2C and TWSTA - start I2C
  b2:	94 ea       	ldi	r25, 0xA4	; 164
  b4:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT)));   // check if TWINT = 0
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	99 23       	and	r25, r25
  c0:	ec f7       	brge	.-6      	; 0xbc <I2C_start+0xa>
	
	TWDR = address;				// write the address 0x68 - slave address
  c2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
  cc:	ec eb       	ldi	r30, 0xBC	; 188
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <I2C_start+0x1e>
}
  d6:	08 95       	ret

000000d8 <I2C_start_wait>:

void I2C_start_wait(unsigned char address){		// this function is used initially
	
	while(1){
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);  // enable interrupt, enable I2C and TWSTA - start I2C
  d8:	94 ea       	ldi	r25, 0xA4	; 164
  da:	90 93 bc 00 	sts	0x00BC, r25
		while(!(TWCR & (1<<TWINT)));   // check if TWINT = 0
  de:	ec eb       	ldi	r30, 0xBC	; 188
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	90 81       	ld	r25, Z
  e4:	99 23       	and	r25, r25
  e6:	ec f7       	brge	.-6      	; 0xe2 <I2C_start_wait+0xa>
		
		TWDR = address;				// write the address 0x68 - slave address
  e8:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1<<TWINT) | (1<<TWEN);
  ec:	84 e8       	ldi	r24, 0x84	; 132
  ee:	80 93 bc 00 	sts	0x00BC, r24
		while(!(TWCR & (1<<TWINT)));
  f2:	ec eb       	ldi	r30, 0xBC	; 188
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	ec f7       	brge	.-6      	; 0xf6 <I2C_start_wait+0x1e>
		break;
	}	// wait until communication starts	
}
  fc:	08 95       	ret

000000fe <I2C_rep_start>:

void I2C_rep_start(unsigned char address){    // Repeat start
	
	I2C_start(address);
  fe:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_start>
 102:	08 95       	ret

00000104 <I2C_write>:
}

unsigned char I2C_write(unsigned char data){		// write operation
	
	TWDR = data;
 104:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 108:	84 e8       	ldi	r24, 0x84	; 132
 10a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
 10e:	ec eb       	ldi	r30, 0xBC	; 188
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	ec f7       	brge	.-6      	; 0x112 <I2C_write+0xe>
}
 118:	08 95       	ret

0000011a <I2C_read_ack>:

unsigned char I2C_read_ack(void){
	
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);  // enable interrupt, enable I2C and 
 11a:	84 ec       	ldi	r24, 0xC4	; 196
 11c:	80 93 bc 00 	sts	0x00BC, r24
												//The TWEA bit must be written to one to enable the acknowledgment of
												//the device’s own slave address or the general call address.
	while(!(TWCR & (1<<TWINT)));   // check if TWINT = 0
 120:	ec eb       	ldi	r30, 0xBC	; 188
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 23       	and	r24, r24
 128:	ec f7       	brge	.-6      	; 0x124 <I2C_read_ack+0xa>
	return(TWDR);
 12a:	80 91 bb 00 	lds	r24, 0x00BB
}	
 12e:	08 95       	ret

00000130 <I2C_read_nack>:

unsigned char I2C_read_nack(void){
	
	TWCR = (1<<TWINT) | (1<<TWEN); // no need to check TWEA
 130:	84 e8       	ldi	r24, 0x84	; 132
 132:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
 136:	ec eb       	ldi	r30, 0xBC	; 188
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 23       	and	r24, r24
 13e:	ec f7       	brge	.-6      	; 0x13a <I2C_read_nack+0xa>
	return(TWDR);
 140:	80 91 bb 00 	lds	r24, 0x00BB
}
 144:	08 95       	ret

00000146 <I2C_stop>:

void I2C_stop(void){
	
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // enable interrupt, enable I2C and 
 146:	84 e9       	ldi	r24, 0x94	; 148
 148:	80 93 bc 00 	sts	0x00BC, r24
												// Writing the TWSTO bit to one in master mode will generate a STOP condition on 
												//the 2-wire serial bus. When the STOP
												//condition is executed on the bus, the TWSTO bit is cleared automatically.
	while(TWCR & (1<<TWSTO));
 14c:	ec eb       	ldi	r30, 0xBC	; 188
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	84 fd       	sbrc	r24, 4
 154:	fd cf       	rjmp	.-6      	; 0x150 <I2C_stop+0xa>
}
 156:	08 95       	ret

00000158 <BCD2DEC>:

uint8_t day;

uint8_t BCD2DEC(uint8_t val){
	
	return((val/16*10) + (val%16));
 158:	98 2f       	mov	r25, r24
 15a:	92 95       	swap	r25
 15c:	9f 70       	andi	r25, 0x0F	; 15
 15e:	99 0f       	add	r25, r25
 160:	29 2f       	mov	r18, r25
 162:	22 0f       	add	r18, r18
 164:	22 0f       	add	r18, r18
 166:	92 0f       	add	r25, r18
 168:	8f 70       	andi	r24, 0x0F	; 15
}
 16a:	89 0f       	add	r24, r25
 16c:	08 95       	ret

0000016e <DEC2BCD>:

uint8_t DEC2BCD(uint8_t val){
	
	return((val/10*16) + (val%10));
 16e:	9d ec       	ldi	r25, 0xCD	; 205
 170:	89 9f       	mul	r24, r25
 172:	91 2d       	mov	r25, r1
 174:	11 24       	eor	r1, r1
 176:	96 95       	lsr	r25
 178:	96 95       	lsr	r25
 17a:	96 95       	lsr	r25
 17c:	29 2f       	mov	r18, r25
 17e:	22 0f       	add	r18, r18
 180:	32 2f       	mov	r19, r18
 182:	33 0f       	add	r19, r19
 184:	33 0f       	add	r19, r19
 186:	23 0f       	add	r18, r19
 188:	82 1b       	sub	r24, r18
}
 18a:	20 e1       	ldi	r18, 0x10	; 16
 18c:	92 9f       	mul	r25, r18
 18e:	80 0d       	add	r24, r0
 190:	11 24       	eor	r1, r1
 192:	08 95       	ret

00000194 <RTC_Init>:

void RTC_Init(){
	
	I2C_Init();
 194:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	85 e3       	ldi	r24, 0x35	; 53
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <RTC_Init+0x6>
 19e:	00 00       	nop
 1a0:	08 95       	ret

000001a2 <RTC_set_time_and_date>:
	_delay_us(10);
}

uint8_t RTC_set_time_and_date(uint8_t seconds, uint8_t minutes, uint8_t hours, uint8_t day, uint8_t date, uint8_t month, uint8_t year){
 1a2:	cf 92       	push	r12
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	f8 2e       	mov	r15, r24
 1b2:	16 2f       	mov	r17, r22
 1b4:	d4 2f       	mov	r29, r20
 1b6:	c2 2f       	mov	r28, r18
	
	I2C_start_wait(RTC_ADDRESS | I2C_WRITE);
 1b8:	80 ed       	ldi	r24, 0xD0	; 208
 1ba:	0e 94 6c 00 	call	0xd8	; 0xd8 <I2C_start_wait>
	I2C_write(0x00);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 82 00 	call	0x104	; 0x104 <I2C_write>
	I2C_write(DEC2BCD(seconds));
 1c4:	8f 2d       	mov	r24, r15
 1c6:	0e 94 b7 00 	call	0x16e	; 0x16e <DEC2BCD>
 1ca:	0e 94 82 00 	call	0x104	; 0x104 <I2C_write>
	I2C_write(DEC2BCD(minutes));
 1ce:	81 2f       	mov	r24, r17
 1d0:	0e 94 b7 00 	call	0x16e	; 0x16e <DEC2BCD>
 1d4:	0e 94 82 00 	call	0x104	; 0x104 <I2C_write>
	I2C_write(DEC2BCD(hours));
 1d8:	8d 2f       	mov	r24, r29
 1da:	0e 94 b7 00 	call	0x16e	; 0x16e <DEC2BCD>
 1de:	0e 94 82 00 	call	0x104	; 0x104 <I2C_write>
	I2C_write(DEC2BCD(day));
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 b7 00 	call	0x16e	; 0x16e <DEC2BCD>
 1e8:	0e 94 82 00 	call	0x104	; 0x104 <I2C_write>
	I2C_write(DEC2BCD(date));
 1ec:	80 2f       	mov	r24, r16
 1ee:	0e 94 b7 00 	call	0x16e	; 0x16e <DEC2BCD>
 1f2:	0e 94 82 00 	call	0x104	; 0x104 <I2C_write>
	I2C_write(DEC2BCD(month));
 1f6:	8e 2d       	mov	r24, r14
 1f8:	0e 94 b7 00 	call	0x16e	; 0x16e <DEC2BCD>
 1fc:	0e 94 82 00 	call	0x104	; 0x104 <I2C_write>
	I2C_write(DEC2BCD(year));
 200:	8c 2d       	mov	r24, r12
 202:	0e 94 b7 00 	call	0x16e	; 0x16e <DEC2BCD>
 206:	0e 94 82 00 	call	0x104	; 0x104 <I2C_write>
	I2C_stop();
 20a:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_stop>
	return(1);	
}
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	ff 90       	pop	r15
 21a:	ef 90       	pop	r14
 21c:	cf 90       	pop	r12
 21e:	08 95       	ret

00000220 <RTC_get_time_and_date>:

void RTC_get_time_and_date(uint8_t *seconds, uint8_t *minutes, uint8_t *hours, uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *year){
 220:	6f 92       	push	r6
 222:	7f 92       	push	r7
 224:	8f 92       	push	r8
 226:	9f 92       	push	r9
 228:	af 92       	push	r10
 22a:	bf 92       	push	r11
 22c:	cf 92       	push	r12
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	4c 01       	movw	r8, r24
 23e:	5b 01       	movw	r10, r22
 240:	ea 01       	movw	r28, r20
 242:	39 01       	movw	r6, r18
	
	I2C_start_wait(RTC_ADDRESS | I2C_WRITE);
 244:	80 ed       	ldi	r24, 0xD0	; 208
 246:	0e 94 6c 00 	call	0xd8	; 0xd8 <I2C_start_wait>
	I2C_write(0x00);
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 82 00 	call	0x104	; 0x104 <I2C_write>
	I2C_stop();
 250:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_stop>
	
	I2C_rep_start(RTC_ADDRESS | I2C_READ);
 254:	81 ed       	ldi	r24, 0xD1	; 209
 256:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_rep_start>
	*seconds = BCD2DEC(I2C_read_ack());
 25a:	0e 94 8d 00 	call	0x11a	; 0x11a <I2C_read_ack>
 25e:	0e 94 ac 00 	call	0x158	; 0x158 <BCD2DEC>
 262:	f4 01       	movw	r30, r8
 264:	80 83       	st	Z, r24
	*minutes = BCD2DEC(I2C_read_ack());
 266:	0e 94 8d 00 	call	0x11a	; 0x11a <I2C_read_ack>
 26a:	0e 94 ac 00 	call	0x158	; 0x158 <BCD2DEC>
 26e:	f5 01       	movw	r30, r10
 270:	80 83       	st	Z, r24
	*hours = BCD2DEC(I2C_read_ack());	
 272:	0e 94 8d 00 	call	0x11a	; 0x11a <I2C_read_ack>
 276:	0e 94 ac 00 	call	0x158	; 0x158 <BCD2DEC>
 27a:	88 83       	st	Y, r24
	*day = BCD2DEC(I2C_read_ack());
 27c:	0e 94 8d 00 	call	0x11a	; 0x11a <I2C_read_ack>
 280:	0e 94 ac 00 	call	0x158	; 0x158 <BCD2DEC>
 284:	f3 01       	movw	r30, r6
 286:	80 83       	st	Z, r24
	*date = BCD2DEC(I2C_read_ack());
 288:	0e 94 8d 00 	call	0x11a	; 0x11a <I2C_read_ack>
 28c:	0e 94 ac 00 	call	0x158	; 0x158 <BCD2DEC>
 290:	f8 01       	movw	r30, r16
 292:	80 83       	st	Z, r24
	*month = BCD2DEC(I2C_read_ack());
 294:	0e 94 8d 00 	call	0x11a	; 0x11a <I2C_read_ack>
 298:	0e 94 ac 00 	call	0x158	; 0x158 <BCD2DEC>
 29c:	f7 01       	movw	r30, r14
 29e:	80 83       	st	Z, r24
	*year = BCD2DEC(I2C_read_nack());
 2a0:	0e 94 98 00 	call	0x130	; 0x130 <I2C_read_nack>
 2a4:	0e 94 ac 00 	call	0x158	; 0x158 <BCD2DEC>
 2a8:	f6 01       	movw	r30, r12
 2aa:	80 83       	st	Z, r24
	I2C_stop();	
 2ac:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_stop>
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	df 90       	pop	r13
 2be:	cf 90       	pop	r12
 2c0:	bf 90       	pop	r11
 2c2:	af 90       	pop	r10
 2c4:	9f 90       	pop	r9
 2c6:	8f 90       	pop	r8
 2c8:	7f 90       	pop	r7
 2ca:	6f 90       	pop	r6
 2cc:	08 95       	ret

000002ce <main>:
#include "USART.h"      // Serial USART header file
#include "RTC.h"		// RTC header file


int main(void)
{
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	e9 97       	sbiw	r28, 0x39	; 57
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	f8 94       	cli
 2dc:	de bf       	out	0x3e, r29	; 62
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	cd bf       	out	0x3d, r28	; 61
    USART_Init();		// Initialise USART
 2e2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <USART_Init>
	USART_Tx_string("USART\r\n");
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <USART_Tx_string>
	RTC_Init();			// Initialise RTC (Slave device)
 2ee:	0e 94 ca 00 	call	0x194	; 0x194 <RTC_Init>
	USART_Tx_string("RTC_Initialised\r\n");
 2f2:	88 e0       	ldi	r24, 0x08	; 8
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <USART_Tx_string>
	
	uint8_t seconds=0, minutes = 0, hours = 0, day = 0, date = 0, month =0, year = 0;
 2fa:	19 82       	std	Y+1, r1	; 0x01
 2fc:	1a 82       	std	Y+2, r1	; 0x02
 2fe:	1b 82       	std	Y+3, r1	; 0x03
 300:	1c 82       	std	Y+4, r1	; 0x04
 302:	1d 82       	std	Y+5, r1	; 0x05
 304:	1e 82       	std	Y+6, r1	; 0x06
 306:	1f 82       	std	Y+7, r1	; 0x07
	RTC_set_time_and_date(30, 59, 11, 6, 28, 2, 20);  // set the time and date in the above format - starting from seconds to year
 308:	0f 2e       	mov	r0, r31
 30a:	f4 e1       	ldi	r31, 0x14	; 20
 30c:	cf 2e       	mov	r12, r31
 30e:	f0 2d       	mov	r31, r0
 310:	68 94       	set
 312:	ee 24       	eor	r14, r14
 314:	e1 f8       	bld	r14, 1
 316:	0c e1       	ldi	r16, 0x1C	; 28
 318:	26 e0       	ldi	r18, 0x06	; 6
 31a:	4b e0       	ldi	r20, 0x0B	; 11
 31c:	6b e3       	ldi	r22, 0x3B	; 59
 31e:	8e e1       	ldi	r24, 0x1E	; 30
 320:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <RTC_set_time_and_date>
	USART_Tx_string("SET_timeand date");	
 324:	8a e1       	ldi	r24, 0x1A	; 26
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <USART_Tx_string>
    char buffer[50]; // buffer for sprintf - to transmit the string data	 
	while(1)
    {
        RTC_get_time_and_date(&seconds, &minutes, &hours, &day, &date, &month, &year);	
		//USART_Tx_string("GET_timeand date");	
        sprintf(buffer, "%d:%d:%d %d %d/%d/%d", seconds, minutes, hours, day, date, month, year);
 32c:	0f 2e       	mov	r0, r31
 32e:	fb e2       	ldi	r31, 0x2B	; 43
 330:	8f 2e       	mov	r8, r31
 332:	f1 e0       	ldi	r31, 0x01	; 1
 334:	9f 2e       	mov	r9, r31
 336:	f0 2d       	mov	r31, r0
 338:	5e 01       	movw	r10, r28
 33a:	28 e0       	ldi	r18, 0x08	; 8
 33c:	a2 0e       	add	r10, r18
 33e:	b1 1c       	adc	r11, r1
	RTC_set_time_and_date(30, 59, 11, 6, 28, 2, 20);  // set the time and date in the above format - starting from seconds to year
	USART_Tx_string("SET_timeand date");	
    char buffer[50]; // buffer for sprintf - to transmit the string data	 
	while(1)
    {
        RTC_get_time_and_date(&seconds, &minutes, &hours, &day, &date, &month, &year);	
 340:	ce 01       	movw	r24, r28
 342:	07 96       	adiw	r24, 0x07	; 7
 344:	6c 01       	movw	r12, r24
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	7c 01       	movw	r14, r24
 34a:	8e 01       	movw	r16, r28
 34c:	0b 5f       	subi	r16, 0xFB	; 251
 34e:	1f 4f       	sbci	r17, 0xFF	; 255
 350:	9e 01       	movw	r18, r28
 352:	2c 5f       	subi	r18, 0xFC	; 252
 354:	3f 4f       	sbci	r19, 0xFF	; 255
 356:	ae 01       	movw	r20, r28
 358:	4d 5f       	subi	r20, 0xFD	; 253
 35a:	5f 4f       	sbci	r21, 0xFF	; 255
 35c:	be 01       	movw	r22, r28
 35e:	6e 5f       	subi	r22, 0xFE	; 254
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	05 97       	sbiw	r24, 0x05	; 5
 364:	0e 94 10 01 	call	0x220	; 0x220 <RTC_get_time_and_date>
		//USART_Tx_string("GET_timeand date");	
        sprintf(buffer, "%d:%d:%d %d %d/%d/%d", seconds, minutes, hours, day, date, month, year);
 368:	8f 81       	ldd	r24, Y+7	; 0x07
 36a:	1f 92       	push	r1
 36c:	8f 93       	push	r24
 36e:	8e 81       	ldd	r24, Y+6	; 0x06
 370:	1f 92       	push	r1
 372:	8f 93       	push	r24
 374:	8d 81       	ldd	r24, Y+5	; 0x05
 376:	1f 92       	push	r1
 378:	8f 93       	push	r24
 37a:	8c 81       	ldd	r24, Y+4	; 0x04
 37c:	1f 92       	push	r1
 37e:	8f 93       	push	r24
 380:	8b 81       	ldd	r24, Y+3	; 0x03
 382:	1f 92       	push	r1
 384:	8f 93       	push	r24
 386:	8a 81       	ldd	r24, Y+2	; 0x02
 388:	1f 92       	push	r1
 38a:	8f 93       	push	r24
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	1f 92       	push	r1
 390:	8f 93       	push	r24
 392:	9f 92       	push	r9
 394:	8f 92       	push	r8
 396:	bf 92       	push	r11
 398:	af 92       	push	r10
 39a:	0e 94 1c 02 	call	0x438	; 0x438 <sprintf>
        USART_Tx_string(buffer);  // Transmit string
 39e:	c5 01       	movw	r24, r10
 3a0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <USART_Tx_string>
        USART_Tx_string("\r\n");
 3a4:	85 e0       	ldi	r24, 0x05	; 5
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <USART_Tx_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ac:	9f ef       	ldi	r25, 0xFF	; 255
 3ae:	23 ed       	ldi	r18, 0xD3	; 211
 3b0:	80 e3       	ldi	r24, 0x30	; 48
 3b2:	91 50       	subi	r25, 0x01	; 1
 3b4:	20 40       	sbci	r18, 0x00	; 0
 3b6:	80 40       	sbci	r24, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <main+0xe4>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <main+0xee>
 3bc:	00 00       	nop
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	f8 94       	cli
 3c2:	de bf       	out	0x3e, r29	; 62
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	cd bf       	out	0x3d, r28	; 61
 3c8:	bb cf       	rjmp	.-138    	; 0x340 <main+0x72>

000003ca <USART_Init>:
#include "USART.h"


/* Initialize the USART to transmit and receive the data */
void USART_Init(){
	UBRR0H = 0x01;   // 2400 baud rate --> UBRRn = 416 dec = 1A0 hex ; UBRR0H = 0x01 and UBRR0L = 0xA0
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = 0xA0;
 3d0:	80 ea       	ldi	r24, 0xA0	; 160
 3d2:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
 3d6:	88 e1       	ldi	r24, 0x18	; 24
 3d8:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
 3dc:	86 e0       	ldi	r24, 0x06	; 6
 3de:	80 93 c2 00 	sts	0x00C2, r24
 3e2:	08 95       	ret

000003e4 <USART_Tx>:
	return UDR0;
}

/* Transmit the character from UDR0 */
void USART_Tx(char data){
	while(!(UCSR0A & (1<<UDRE0)));
 3e4:	e0 ec       	ldi	r30, 0xC0	; 192
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	90 81       	ld	r25, Z
 3ea:	95 ff       	sbrs	r25, 5
 3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <USART_Tx+0x4>
	UDR0 = data;
 3ee:	80 93 c6 00 	sts	0x00C6, r24
 3f2:	08 95       	ret

000003f4 <USART_Tx_string>:
}

/* Transmit the string */
void USART_Tx_string(char text[]){
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	ec 01       	movw	r28, r24
	int i=0;
	while(i<255){
		if (text[i] == '\0')
 3fe:	88 81       	ld	r24, Y
 400:	81 11       	cpse	r24, r1
 402:	0d c0       	rjmp	.+26     	; 0x41e <USART_Tx_string+0x2a>
 404:	14 c0       	rjmp	.+40     	; 0x42e <USART_Tx_string+0x3a>
 406:	f8 01       	movw	r30, r16
 408:	81 91       	ld	r24, Z+
 40a:	8f 01       	movw	r16, r30
 40c:	88 23       	and	r24, r24
 40e:	79 f0       	breq	.+30     	; 0x42e <USART_Tx_string+0x3a>
		break;
		USART_Tx(text[i]);
 410:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <USART_Tx>
		i++;
 414:	21 96       	adiw	r28, 0x01	; 1
}

/* Transmit the string */
void USART_Tx_string(char text[]){
	int i=0;
	while(i<255){
 416:	cf 3f       	cpi	r28, 0xFF	; 255
 418:	d1 05       	cpc	r29, r1
 41a:	a9 f7       	brne	.-22     	; 0x406 <USART_Tx_string+0x12>
 41c:	08 c0       	rjmp	.+16     	; 0x42e <USART_Tx_string+0x3a>
		if (text[i] == '\0')
		break;
		USART_Tx(text[i]);
 41e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <USART_Tx>
 422:	8e 01       	movw	r16, r28
 424:	0f 5f       	subi	r16, 0xFF	; 255
 426:	1f 4f       	sbci	r17, 0xFF	; 255
		i++;
 428:	c1 e0       	ldi	r28, 0x01	; 1
 42a:	d0 e0       	ldi	r29, 0x00	; 0
 42c:	ec cf       	rjmp	.-40     	; 0x406 <USART_Tx_string+0x12>
	}
}
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	08 95       	ret

00000438 <sprintf>:
 438:	ae e0       	ldi	r26, 0x0E	; 14
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	e2 e2       	ldi	r30, 0x22	; 34
 43e:	f2 e0       	ldi	r31, 0x02	; 2
 440:	0c 94 c4 04 	jmp	0x988	; 0x988 <__prologue_saves__+0x1c>
 444:	0d 89       	ldd	r16, Y+21	; 0x15
 446:	1e 89       	ldd	r17, Y+22	; 0x16
 448:	86 e0       	ldi	r24, 0x06	; 6
 44a:	8c 83       	std	Y+4, r24	; 0x04
 44c:	1a 83       	std	Y+2, r17	; 0x02
 44e:	09 83       	std	Y+1, r16	; 0x01
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	9f e7       	ldi	r25, 0x7F	; 127
 454:	9e 83       	std	Y+6, r25	; 0x06
 456:	8d 83       	std	Y+5, r24	; 0x05
 458:	ae 01       	movw	r20, r28
 45a:	47 5e       	subi	r20, 0xE7	; 231
 45c:	5f 4f       	sbci	r21, 0xFF	; 255
 45e:	6f 89       	ldd	r22, Y+23	; 0x17
 460:	78 8d       	ldd	r23, Y+24	; 0x18
 462:	ce 01       	movw	r24, r28
 464:	01 96       	adiw	r24, 0x01	; 1
 466:	0e 94 3e 02 	call	0x47c	; 0x47c <vfprintf>
 46a:	ef 81       	ldd	r30, Y+7	; 0x07
 46c:	f8 85       	ldd	r31, Y+8	; 0x08
 46e:	e0 0f       	add	r30, r16
 470:	f1 1f       	adc	r31, r17
 472:	10 82       	st	Z, r1
 474:	2e 96       	adiw	r28, 0x0e	; 14
 476:	e4 e0       	ldi	r30, 0x04	; 4
 478:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__epilogue_restores__+0x1c>

0000047c <vfprintf>:
 47c:	ac e0       	ldi	r26, 0x0C	; 12
 47e:	b0 e0       	ldi	r27, 0x00	; 0
 480:	e4 e4       	ldi	r30, 0x44	; 68
 482:	f2 e0       	ldi	r31, 0x02	; 2
 484:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__prologue_saves__>
 488:	7c 01       	movw	r14, r24
 48a:	6b 01       	movw	r12, r22
 48c:	8a 01       	movw	r16, r20
 48e:	fc 01       	movw	r30, r24
 490:	17 82       	std	Z+7, r1	; 0x07
 492:	16 82       	std	Z+6, r1	; 0x06
 494:	83 81       	ldd	r24, Z+3	; 0x03
 496:	81 ff       	sbrs	r24, 1
 498:	bd c1       	rjmp	.+890    	; 0x814 <vfprintf+0x398>
 49a:	ce 01       	movw	r24, r28
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	4c 01       	movw	r8, r24
 4a0:	f7 01       	movw	r30, r14
 4a2:	93 81       	ldd	r25, Z+3	; 0x03
 4a4:	f6 01       	movw	r30, r12
 4a6:	93 fd       	sbrc	r25, 3
 4a8:	85 91       	lpm	r24, Z+
 4aa:	93 ff       	sbrs	r25, 3
 4ac:	81 91       	ld	r24, Z+
 4ae:	6f 01       	movw	r12, r30
 4b0:	88 23       	and	r24, r24
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <vfprintf+0x3a>
 4b4:	ab c1       	rjmp	.+854    	; 0x80c <vfprintf+0x390>
 4b6:	85 32       	cpi	r24, 0x25	; 37
 4b8:	39 f4       	brne	.+14     	; 0x4c8 <vfprintf+0x4c>
 4ba:	93 fd       	sbrc	r25, 3
 4bc:	85 91       	lpm	r24, Z+
 4be:	93 ff       	sbrs	r25, 3
 4c0:	81 91       	ld	r24, Z+
 4c2:	6f 01       	movw	r12, r30
 4c4:	85 32       	cpi	r24, 0x25	; 37
 4c6:	29 f4       	brne	.+10     	; 0x4d2 <vfprintf+0x56>
 4c8:	b7 01       	movw	r22, r14
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 26 04 	call	0x84c	; 0x84c <fputc>
 4d0:	e7 cf       	rjmp	.-50     	; 0x4a0 <vfprintf+0x24>
 4d2:	51 2c       	mov	r5, r1
 4d4:	31 2c       	mov	r3, r1
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	20 32       	cpi	r18, 0x20	; 32
 4da:	a0 f4       	brcc	.+40     	; 0x504 <vfprintf+0x88>
 4dc:	8b 32       	cpi	r24, 0x2B	; 43
 4de:	69 f0       	breq	.+26     	; 0x4fa <vfprintf+0x7e>
 4e0:	30 f4       	brcc	.+12     	; 0x4ee <vfprintf+0x72>
 4e2:	80 32       	cpi	r24, 0x20	; 32
 4e4:	59 f0       	breq	.+22     	; 0x4fc <vfprintf+0x80>
 4e6:	83 32       	cpi	r24, 0x23	; 35
 4e8:	69 f4       	brne	.+26     	; 0x504 <vfprintf+0x88>
 4ea:	20 61       	ori	r18, 0x10	; 16
 4ec:	2c c0       	rjmp	.+88     	; 0x546 <vfprintf+0xca>
 4ee:	8d 32       	cpi	r24, 0x2D	; 45
 4f0:	39 f0       	breq	.+14     	; 0x500 <vfprintf+0x84>
 4f2:	80 33       	cpi	r24, 0x30	; 48
 4f4:	39 f4       	brne	.+14     	; 0x504 <vfprintf+0x88>
 4f6:	21 60       	ori	r18, 0x01	; 1
 4f8:	26 c0       	rjmp	.+76     	; 0x546 <vfprintf+0xca>
 4fa:	22 60       	ori	r18, 0x02	; 2
 4fc:	24 60       	ori	r18, 0x04	; 4
 4fe:	23 c0       	rjmp	.+70     	; 0x546 <vfprintf+0xca>
 500:	28 60       	ori	r18, 0x08	; 8
 502:	21 c0       	rjmp	.+66     	; 0x546 <vfprintf+0xca>
 504:	27 fd       	sbrc	r18, 7
 506:	27 c0       	rjmp	.+78     	; 0x556 <vfprintf+0xda>
 508:	30 ed       	ldi	r19, 0xD0	; 208
 50a:	38 0f       	add	r19, r24
 50c:	3a 30       	cpi	r19, 0x0A	; 10
 50e:	78 f4       	brcc	.+30     	; 0x52e <vfprintf+0xb2>
 510:	26 ff       	sbrs	r18, 6
 512:	06 c0       	rjmp	.+12     	; 0x520 <vfprintf+0xa4>
 514:	fa e0       	ldi	r31, 0x0A	; 10
 516:	5f 9e       	mul	r5, r31
 518:	30 0d       	add	r19, r0
 51a:	11 24       	eor	r1, r1
 51c:	53 2e       	mov	r5, r19
 51e:	13 c0       	rjmp	.+38     	; 0x546 <vfprintf+0xca>
 520:	8a e0       	ldi	r24, 0x0A	; 10
 522:	38 9e       	mul	r3, r24
 524:	30 0d       	add	r19, r0
 526:	11 24       	eor	r1, r1
 528:	33 2e       	mov	r3, r19
 52a:	20 62       	ori	r18, 0x20	; 32
 52c:	0c c0       	rjmp	.+24     	; 0x546 <vfprintf+0xca>
 52e:	8e 32       	cpi	r24, 0x2E	; 46
 530:	21 f4       	brne	.+8      	; 0x53a <vfprintf+0xbe>
 532:	26 fd       	sbrc	r18, 6
 534:	6b c1       	rjmp	.+726    	; 0x80c <vfprintf+0x390>
 536:	20 64       	ori	r18, 0x40	; 64
 538:	06 c0       	rjmp	.+12     	; 0x546 <vfprintf+0xca>
 53a:	8c 36       	cpi	r24, 0x6C	; 108
 53c:	11 f4       	brne	.+4      	; 0x542 <vfprintf+0xc6>
 53e:	20 68       	ori	r18, 0x80	; 128
 540:	02 c0       	rjmp	.+4      	; 0x546 <vfprintf+0xca>
 542:	88 36       	cpi	r24, 0x68	; 104
 544:	41 f4       	brne	.+16     	; 0x556 <vfprintf+0xda>
 546:	f6 01       	movw	r30, r12
 548:	93 fd       	sbrc	r25, 3
 54a:	85 91       	lpm	r24, Z+
 54c:	93 ff       	sbrs	r25, 3
 54e:	81 91       	ld	r24, Z+
 550:	6f 01       	movw	r12, r30
 552:	81 11       	cpse	r24, r1
 554:	c1 cf       	rjmp	.-126    	; 0x4d8 <vfprintf+0x5c>
 556:	98 2f       	mov	r25, r24
 558:	9f 7d       	andi	r25, 0xDF	; 223
 55a:	95 54       	subi	r25, 0x45	; 69
 55c:	93 30       	cpi	r25, 0x03	; 3
 55e:	28 f4       	brcc	.+10     	; 0x56a <vfprintf+0xee>
 560:	0c 5f       	subi	r16, 0xFC	; 252
 562:	1f 4f       	sbci	r17, 0xFF	; 255
 564:	ff e3       	ldi	r31, 0x3F	; 63
 566:	f9 83       	std	Y+1, r31	; 0x01
 568:	0d c0       	rjmp	.+26     	; 0x584 <vfprintf+0x108>
 56a:	83 36       	cpi	r24, 0x63	; 99
 56c:	31 f0       	breq	.+12     	; 0x57a <vfprintf+0xfe>
 56e:	83 37       	cpi	r24, 0x73	; 115
 570:	71 f0       	breq	.+28     	; 0x58e <vfprintf+0x112>
 572:	83 35       	cpi	r24, 0x53	; 83
 574:	09 f0       	breq	.+2      	; 0x578 <vfprintf+0xfc>
 576:	5b c0       	rjmp	.+182    	; 0x62e <vfprintf+0x1b2>
 578:	22 c0       	rjmp	.+68     	; 0x5be <vfprintf+0x142>
 57a:	f8 01       	movw	r30, r16
 57c:	80 81       	ld	r24, Z
 57e:	89 83       	std	Y+1, r24	; 0x01
 580:	0e 5f       	subi	r16, 0xFE	; 254
 582:	1f 4f       	sbci	r17, 0xFF	; 255
 584:	44 24       	eor	r4, r4
 586:	43 94       	inc	r4
 588:	51 2c       	mov	r5, r1
 58a:	54 01       	movw	r10, r8
 58c:	15 c0       	rjmp	.+42     	; 0x5b8 <vfprintf+0x13c>
 58e:	38 01       	movw	r6, r16
 590:	f2 e0       	ldi	r31, 0x02	; 2
 592:	6f 0e       	add	r6, r31
 594:	71 1c       	adc	r7, r1
 596:	f8 01       	movw	r30, r16
 598:	a0 80       	ld	r10, Z
 59a:	b1 80       	ldd	r11, Z+1	; 0x01
 59c:	26 ff       	sbrs	r18, 6
 59e:	03 c0       	rjmp	.+6      	; 0x5a6 <vfprintf+0x12a>
 5a0:	65 2d       	mov	r22, r5
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <vfprintf+0x12e>
 5a6:	6f ef       	ldi	r22, 0xFF	; 255
 5a8:	7f ef       	ldi	r23, 0xFF	; 255
 5aa:	c5 01       	movw	r24, r10
 5ac:	2c 87       	std	Y+12, r18	; 0x0c
 5ae:	0e 94 1b 04 	call	0x836	; 0x836 <strnlen>
 5b2:	2c 01       	movw	r4, r24
 5b4:	83 01       	movw	r16, r6
 5b6:	2c 85       	ldd	r18, Y+12	; 0x0c
 5b8:	2f 77       	andi	r18, 0x7F	; 127
 5ba:	22 2e       	mov	r2, r18
 5bc:	17 c0       	rjmp	.+46     	; 0x5ec <vfprintf+0x170>
 5be:	38 01       	movw	r6, r16
 5c0:	f2 e0       	ldi	r31, 0x02	; 2
 5c2:	6f 0e       	add	r6, r31
 5c4:	71 1c       	adc	r7, r1
 5c6:	f8 01       	movw	r30, r16
 5c8:	a0 80       	ld	r10, Z
 5ca:	b1 80       	ldd	r11, Z+1	; 0x01
 5cc:	26 ff       	sbrs	r18, 6
 5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <vfprintf+0x15a>
 5d0:	65 2d       	mov	r22, r5
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <vfprintf+0x15e>
 5d6:	6f ef       	ldi	r22, 0xFF	; 255
 5d8:	7f ef       	ldi	r23, 0xFF	; 255
 5da:	c5 01       	movw	r24, r10
 5dc:	2c 87       	std	Y+12, r18	; 0x0c
 5de:	0e 94 10 04 	call	0x820	; 0x820 <strnlen_P>
 5e2:	2c 01       	movw	r4, r24
 5e4:	2c 85       	ldd	r18, Y+12	; 0x0c
 5e6:	20 68       	ori	r18, 0x80	; 128
 5e8:	22 2e       	mov	r2, r18
 5ea:	83 01       	movw	r16, r6
 5ec:	23 fc       	sbrc	r2, 3
 5ee:	1b c0       	rjmp	.+54     	; 0x626 <vfprintf+0x1aa>
 5f0:	83 2d       	mov	r24, r3
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	48 16       	cp	r4, r24
 5f6:	59 06       	cpc	r5, r25
 5f8:	b0 f4       	brcc	.+44     	; 0x626 <vfprintf+0x1aa>
 5fa:	b7 01       	movw	r22, r14
 5fc:	80 e2       	ldi	r24, 0x20	; 32
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 26 04 	call	0x84c	; 0x84c <fputc>
 604:	3a 94       	dec	r3
 606:	f4 cf       	rjmp	.-24     	; 0x5f0 <vfprintf+0x174>
 608:	f5 01       	movw	r30, r10
 60a:	27 fc       	sbrc	r2, 7
 60c:	85 91       	lpm	r24, Z+
 60e:	27 fe       	sbrs	r2, 7
 610:	81 91       	ld	r24, Z+
 612:	5f 01       	movw	r10, r30
 614:	b7 01       	movw	r22, r14
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 26 04 	call	0x84c	; 0x84c <fputc>
 61c:	31 10       	cpse	r3, r1
 61e:	3a 94       	dec	r3
 620:	f1 e0       	ldi	r31, 0x01	; 1
 622:	4f 1a       	sub	r4, r31
 624:	51 08       	sbc	r5, r1
 626:	41 14       	cp	r4, r1
 628:	51 04       	cpc	r5, r1
 62a:	71 f7       	brne	.-36     	; 0x608 <vfprintf+0x18c>
 62c:	e5 c0       	rjmp	.+458    	; 0x7f8 <vfprintf+0x37c>
 62e:	84 36       	cpi	r24, 0x64	; 100
 630:	11 f0       	breq	.+4      	; 0x636 <vfprintf+0x1ba>
 632:	89 36       	cpi	r24, 0x69	; 105
 634:	39 f5       	brne	.+78     	; 0x684 <vfprintf+0x208>
 636:	f8 01       	movw	r30, r16
 638:	27 ff       	sbrs	r18, 7
 63a:	07 c0       	rjmp	.+14     	; 0x64a <vfprintf+0x1ce>
 63c:	60 81       	ld	r22, Z
 63e:	71 81       	ldd	r23, Z+1	; 0x01
 640:	82 81       	ldd	r24, Z+2	; 0x02
 642:	93 81       	ldd	r25, Z+3	; 0x03
 644:	0c 5f       	subi	r16, 0xFC	; 252
 646:	1f 4f       	sbci	r17, 0xFF	; 255
 648:	08 c0       	rjmp	.+16     	; 0x65a <vfprintf+0x1de>
 64a:	60 81       	ld	r22, Z
 64c:	71 81       	ldd	r23, Z+1	; 0x01
 64e:	88 27       	eor	r24, r24
 650:	77 fd       	sbrc	r23, 7
 652:	80 95       	com	r24
 654:	98 2f       	mov	r25, r24
 656:	0e 5f       	subi	r16, 0xFE	; 254
 658:	1f 4f       	sbci	r17, 0xFF	; 255
 65a:	2f 76       	andi	r18, 0x6F	; 111
 65c:	b2 2e       	mov	r11, r18
 65e:	97 ff       	sbrs	r25, 7
 660:	09 c0       	rjmp	.+18     	; 0x674 <vfprintf+0x1f8>
 662:	90 95       	com	r25
 664:	80 95       	com	r24
 666:	70 95       	com	r23
 668:	61 95       	neg	r22
 66a:	7f 4f       	sbci	r23, 0xFF	; 255
 66c:	8f 4f       	sbci	r24, 0xFF	; 255
 66e:	9f 4f       	sbci	r25, 0xFF	; 255
 670:	20 68       	ori	r18, 0x80	; 128
 672:	b2 2e       	mov	r11, r18
 674:	2a e0       	ldi	r18, 0x0A	; 10
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	a4 01       	movw	r20, r8
 67a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__ultoa_invert>
 67e:	a8 2e       	mov	r10, r24
 680:	a8 18       	sub	r10, r8
 682:	44 c0       	rjmp	.+136    	; 0x70c <vfprintf+0x290>
 684:	85 37       	cpi	r24, 0x75	; 117
 686:	29 f4       	brne	.+10     	; 0x692 <vfprintf+0x216>
 688:	2f 7e       	andi	r18, 0xEF	; 239
 68a:	b2 2e       	mov	r11, r18
 68c:	2a e0       	ldi	r18, 0x0A	; 10
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	25 c0       	rjmp	.+74     	; 0x6dc <vfprintf+0x260>
 692:	f2 2f       	mov	r31, r18
 694:	f9 7f       	andi	r31, 0xF9	; 249
 696:	bf 2e       	mov	r11, r31
 698:	8f 36       	cpi	r24, 0x6F	; 111
 69a:	c1 f0       	breq	.+48     	; 0x6cc <vfprintf+0x250>
 69c:	18 f4       	brcc	.+6      	; 0x6a4 <vfprintf+0x228>
 69e:	88 35       	cpi	r24, 0x58	; 88
 6a0:	79 f0       	breq	.+30     	; 0x6c0 <vfprintf+0x244>
 6a2:	b4 c0       	rjmp	.+360    	; 0x80c <vfprintf+0x390>
 6a4:	80 37       	cpi	r24, 0x70	; 112
 6a6:	19 f0       	breq	.+6      	; 0x6ae <vfprintf+0x232>
 6a8:	88 37       	cpi	r24, 0x78	; 120
 6aa:	21 f0       	breq	.+8      	; 0x6b4 <vfprintf+0x238>
 6ac:	af c0       	rjmp	.+350    	; 0x80c <vfprintf+0x390>
 6ae:	2f 2f       	mov	r18, r31
 6b0:	20 61       	ori	r18, 0x10	; 16
 6b2:	b2 2e       	mov	r11, r18
 6b4:	b4 fe       	sbrs	r11, 4
 6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <vfprintf+0x256>
 6b8:	8b 2d       	mov	r24, r11
 6ba:	84 60       	ori	r24, 0x04	; 4
 6bc:	b8 2e       	mov	r11, r24
 6be:	09 c0       	rjmp	.+18     	; 0x6d2 <vfprintf+0x256>
 6c0:	24 ff       	sbrs	r18, 4
 6c2:	0a c0       	rjmp	.+20     	; 0x6d8 <vfprintf+0x25c>
 6c4:	9f 2f       	mov	r25, r31
 6c6:	96 60       	ori	r25, 0x06	; 6
 6c8:	b9 2e       	mov	r11, r25
 6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <vfprintf+0x25c>
 6cc:	28 e0       	ldi	r18, 0x08	; 8
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	05 c0       	rjmp	.+10     	; 0x6dc <vfprintf+0x260>
 6d2:	20 e1       	ldi	r18, 0x10	; 16
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <vfprintf+0x260>
 6d8:	20 e1       	ldi	r18, 0x10	; 16
 6da:	32 e0       	ldi	r19, 0x02	; 2
 6dc:	f8 01       	movw	r30, r16
 6de:	b7 fe       	sbrs	r11, 7
 6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <vfprintf+0x274>
 6e2:	60 81       	ld	r22, Z
 6e4:	71 81       	ldd	r23, Z+1	; 0x01
 6e6:	82 81       	ldd	r24, Z+2	; 0x02
 6e8:	93 81       	ldd	r25, Z+3	; 0x03
 6ea:	0c 5f       	subi	r16, 0xFC	; 252
 6ec:	1f 4f       	sbci	r17, 0xFF	; 255
 6ee:	06 c0       	rjmp	.+12     	; 0x6fc <vfprintf+0x280>
 6f0:	60 81       	ld	r22, Z
 6f2:	71 81       	ldd	r23, Z+1	; 0x01
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 5f       	subi	r16, 0xFE	; 254
 6fa:	1f 4f       	sbci	r17, 0xFF	; 255
 6fc:	a4 01       	movw	r20, r8
 6fe:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__ultoa_invert>
 702:	a8 2e       	mov	r10, r24
 704:	a8 18       	sub	r10, r8
 706:	fb 2d       	mov	r31, r11
 708:	ff 77       	andi	r31, 0x7F	; 127
 70a:	bf 2e       	mov	r11, r31
 70c:	b6 fe       	sbrs	r11, 6
 70e:	0b c0       	rjmp	.+22     	; 0x726 <vfprintf+0x2aa>
 710:	2b 2d       	mov	r18, r11
 712:	2e 7f       	andi	r18, 0xFE	; 254
 714:	a5 14       	cp	r10, r5
 716:	50 f4       	brcc	.+20     	; 0x72c <vfprintf+0x2b0>
 718:	b4 fe       	sbrs	r11, 4
 71a:	0a c0       	rjmp	.+20     	; 0x730 <vfprintf+0x2b4>
 71c:	b2 fc       	sbrc	r11, 2
 71e:	08 c0       	rjmp	.+16     	; 0x730 <vfprintf+0x2b4>
 720:	2b 2d       	mov	r18, r11
 722:	2e 7e       	andi	r18, 0xEE	; 238
 724:	05 c0       	rjmp	.+10     	; 0x730 <vfprintf+0x2b4>
 726:	7a 2c       	mov	r7, r10
 728:	2b 2d       	mov	r18, r11
 72a:	03 c0       	rjmp	.+6      	; 0x732 <vfprintf+0x2b6>
 72c:	7a 2c       	mov	r7, r10
 72e:	01 c0       	rjmp	.+2      	; 0x732 <vfprintf+0x2b6>
 730:	75 2c       	mov	r7, r5
 732:	24 ff       	sbrs	r18, 4
 734:	0d c0       	rjmp	.+26     	; 0x750 <vfprintf+0x2d4>
 736:	fe 01       	movw	r30, r28
 738:	ea 0d       	add	r30, r10
 73a:	f1 1d       	adc	r31, r1
 73c:	80 81       	ld	r24, Z
 73e:	80 33       	cpi	r24, 0x30	; 48
 740:	11 f4       	brne	.+4      	; 0x746 <vfprintf+0x2ca>
 742:	29 7e       	andi	r18, 0xE9	; 233
 744:	09 c0       	rjmp	.+18     	; 0x758 <vfprintf+0x2dc>
 746:	22 ff       	sbrs	r18, 2
 748:	06 c0       	rjmp	.+12     	; 0x756 <vfprintf+0x2da>
 74a:	73 94       	inc	r7
 74c:	73 94       	inc	r7
 74e:	04 c0       	rjmp	.+8      	; 0x758 <vfprintf+0x2dc>
 750:	82 2f       	mov	r24, r18
 752:	86 78       	andi	r24, 0x86	; 134
 754:	09 f0       	breq	.+2      	; 0x758 <vfprintf+0x2dc>
 756:	73 94       	inc	r7
 758:	23 fd       	sbrc	r18, 3
 75a:	13 c0       	rjmp	.+38     	; 0x782 <vfprintf+0x306>
 75c:	20 ff       	sbrs	r18, 0
 75e:	06 c0       	rjmp	.+12     	; 0x76c <vfprintf+0x2f0>
 760:	5a 2c       	mov	r5, r10
 762:	73 14       	cp	r7, r3
 764:	18 f4       	brcc	.+6      	; 0x76c <vfprintf+0x2f0>
 766:	53 0c       	add	r5, r3
 768:	57 18       	sub	r5, r7
 76a:	73 2c       	mov	r7, r3
 76c:	73 14       	cp	r7, r3
 76e:	68 f4       	brcc	.+26     	; 0x78a <vfprintf+0x30e>
 770:	b7 01       	movw	r22, r14
 772:	80 e2       	ldi	r24, 0x20	; 32
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	2c 87       	std	Y+12, r18	; 0x0c
 778:	0e 94 26 04 	call	0x84c	; 0x84c <fputc>
 77c:	73 94       	inc	r7
 77e:	2c 85       	ldd	r18, Y+12	; 0x0c
 780:	f5 cf       	rjmp	.-22     	; 0x76c <vfprintf+0x2f0>
 782:	73 14       	cp	r7, r3
 784:	10 f4       	brcc	.+4      	; 0x78a <vfprintf+0x30e>
 786:	37 18       	sub	r3, r7
 788:	01 c0       	rjmp	.+2      	; 0x78c <vfprintf+0x310>
 78a:	31 2c       	mov	r3, r1
 78c:	24 ff       	sbrs	r18, 4
 78e:	12 c0       	rjmp	.+36     	; 0x7b4 <vfprintf+0x338>
 790:	b7 01       	movw	r22, r14
 792:	80 e3       	ldi	r24, 0x30	; 48
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	2c 87       	std	Y+12, r18	; 0x0c
 798:	0e 94 26 04 	call	0x84c	; 0x84c <fputc>
 79c:	2c 85       	ldd	r18, Y+12	; 0x0c
 79e:	22 ff       	sbrs	r18, 2
 7a0:	17 c0       	rjmp	.+46     	; 0x7d0 <vfprintf+0x354>
 7a2:	21 ff       	sbrs	r18, 1
 7a4:	03 c0       	rjmp	.+6      	; 0x7ac <vfprintf+0x330>
 7a6:	88 e5       	ldi	r24, 0x58	; 88
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <vfprintf+0x334>
 7ac:	88 e7       	ldi	r24, 0x78	; 120
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	b7 01       	movw	r22, r14
 7b2:	0c c0       	rjmp	.+24     	; 0x7cc <vfprintf+0x350>
 7b4:	82 2f       	mov	r24, r18
 7b6:	86 78       	andi	r24, 0x86	; 134
 7b8:	59 f0       	breq	.+22     	; 0x7d0 <vfprintf+0x354>
 7ba:	21 fd       	sbrc	r18, 1
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <vfprintf+0x346>
 7be:	80 e2       	ldi	r24, 0x20	; 32
 7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <vfprintf+0x348>
 7c2:	8b e2       	ldi	r24, 0x2B	; 43
 7c4:	27 fd       	sbrc	r18, 7
 7c6:	8d e2       	ldi	r24, 0x2D	; 45
 7c8:	b7 01       	movw	r22, r14
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 26 04 	call	0x84c	; 0x84c <fputc>
 7d0:	a5 14       	cp	r10, r5
 7d2:	38 f4       	brcc	.+14     	; 0x7e2 <vfprintf+0x366>
 7d4:	b7 01       	movw	r22, r14
 7d6:	80 e3       	ldi	r24, 0x30	; 48
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	0e 94 26 04 	call	0x84c	; 0x84c <fputc>
 7de:	5a 94       	dec	r5
 7e0:	f7 cf       	rjmp	.-18     	; 0x7d0 <vfprintf+0x354>
 7e2:	aa 94       	dec	r10
 7e4:	f4 01       	movw	r30, r8
 7e6:	ea 0d       	add	r30, r10
 7e8:	f1 1d       	adc	r31, r1
 7ea:	80 81       	ld	r24, Z
 7ec:	b7 01       	movw	r22, r14
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 26 04 	call	0x84c	; 0x84c <fputc>
 7f4:	a1 10       	cpse	r10, r1
 7f6:	f5 cf       	rjmp	.-22     	; 0x7e2 <vfprintf+0x366>
 7f8:	33 20       	and	r3, r3
 7fa:	09 f4       	brne	.+2      	; 0x7fe <vfprintf+0x382>
 7fc:	51 ce       	rjmp	.-862    	; 0x4a0 <vfprintf+0x24>
 7fe:	b7 01       	movw	r22, r14
 800:	80 e2       	ldi	r24, 0x20	; 32
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 26 04 	call	0x84c	; 0x84c <fputc>
 808:	3a 94       	dec	r3
 80a:	f6 cf       	rjmp	.-20     	; 0x7f8 <vfprintf+0x37c>
 80c:	f7 01       	movw	r30, r14
 80e:	86 81       	ldd	r24, Z+6	; 0x06
 810:	97 81       	ldd	r25, Z+7	; 0x07
 812:	02 c0       	rjmp	.+4      	; 0x818 <vfprintf+0x39c>
 814:	8f ef       	ldi	r24, 0xFF	; 255
 816:	9f ef       	ldi	r25, 0xFF	; 255
 818:	2c 96       	adiw	r28, 0x0c	; 12
 81a:	e2 e1       	ldi	r30, 0x12	; 18
 81c:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__epilogue_restores__>

00000820 <strnlen_P>:
 820:	fc 01       	movw	r30, r24
 822:	05 90       	lpm	r0, Z+
 824:	61 50       	subi	r22, 0x01	; 1
 826:	70 40       	sbci	r23, 0x00	; 0
 828:	01 10       	cpse	r0, r1
 82a:	d8 f7       	brcc	.-10     	; 0x822 <strnlen_P+0x2>
 82c:	80 95       	com	r24
 82e:	90 95       	com	r25
 830:	8e 0f       	add	r24, r30
 832:	9f 1f       	adc	r25, r31
 834:	08 95       	ret

00000836 <strnlen>:
 836:	fc 01       	movw	r30, r24
 838:	61 50       	subi	r22, 0x01	; 1
 83a:	70 40       	sbci	r23, 0x00	; 0
 83c:	01 90       	ld	r0, Z+
 83e:	01 10       	cpse	r0, r1
 840:	d8 f7       	brcc	.-10     	; 0x838 <strnlen+0x2>
 842:	80 95       	com	r24
 844:	90 95       	com	r25
 846:	8e 0f       	add	r24, r30
 848:	9f 1f       	adc	r25, r31
 84a:	08 95       	ret

0000084c <fputc>:
 84c:	0f 93       	push	r16
 84e:	1f 93       	push	r17
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	18 2f       	mov	r17, r24
 856:	09 2f       	mov	r16, r25
 858:	eb 01       	movw	r28, r22
 85a:	8b 81       	ldd	r24, Y+3	; 0x03
 85c:	81 fd       	sbrc	r24, 1
 85e:	03 c0       	rjmp	.+6      	; 0x866 <fputc+0x1a>
 860:	8f ef       	ldi	r24, 0xFF	; 255
 862:	9f ef       	ldi	r25, 0xFF	; 255
 864:	20 c0       	rjmp	.+64     	; 0x8a6 <fputc+0x5a>
 866:	82 ff       	sbrs	r24, 2
 868:	10 c0       	rjmp	.+32     	; 0x88a <fputc+0x3e>
 86a:	4e 81       	ldd	r20, Y+6	; 0x06
 86c:	5f 81       	ldd	r21, Y+7	; 0x07
 86e:	2c 81       	ldd	r18, Y+4	; 0x04
 870:	3d 81       	ldd	r19, Y+5	; 0x05
 872:	42 17       	cp	r20, r18
 874:	53 07       	cpc	r21, r19
 876:	7c f4       	brge	.+30     	; 0x896 <fputc+0x4a>
 878:	e8 81       	ld	r30, Y
 87a:	f9 81       	ldd	r31, Y+1	; 0x01
 87c:	9f 01       	movw	r18, r30
 87e:	2f 5f       	subi	r18, 0xFF	; 255
 880:	3f 4f       	sbci	r19, 0xFF	; 255
 882:	39 83       	std	Y+1, r19	; 0x01
 884:	28 83       	st	Y, r18
 886:	10 83       	st	Z, r17
 888:	06 c0       	rjmp	.+12     	; 0x896 <fputc+0x4a>
 88a:	e8 85       	ldd	r30, Y+8	; 0x08
 88c:	f9 85       	ldd	r31, Y+9	; 0x09
 88e:	81 2f       	mov	r24, r17
 890:	09 95       	icall
 892:	89 2b       	or	r24, r25
 894:	29 f7       	brne	.-54     	; 0x860 <fputc+0x14>
 896:	2e 81       	ldd	r18, Y+6	; 0x06
 898:	3f 81       	ldd	r19, Y+7	; 0x07
 89a:	2f 5f       	subi	r18, 0xFF	; 255
 89c:	3f 4f       	sbci	r19, 0xFF	; 255
 89e:	3f 83       	std	Y+7, r19	; 0x07
 8a0:	2e 83       	std	Y+6, r18	; 0x06
 8a2:	81 2f       	mov	r24, r17
 8a4:	90 2f       	mov	r25, r16
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	1f 91       	pop	r17
 8ac:	0f 91       	pop	r16
 8ae:	08 95       	ret

000008b0 <__ultoa_invert>:
 8b0:	fa 01       	movw	r30, r20
 8b2:	aa 27       	eor	r26, r26
 8b4:	28 30       	cpi	r18, 0x08	; 8
 8b6:	51 f1       	breq	.+84     	; 0x90c <__stack+0xd>
 8b8:	20 31       	cpi	r18, 0x10	; 16
 8ba:	81 f1       	breq	.+96     	; 0x91c <__stack+0x1d>
 8bc:	e8 94       	clt
 8be:	6f 93       	push	r22
 8c0:	6e 7f       	andi	r22, 0xFE	; 254
 8c2:	6e 5f       	subi	r22, 0xFE	; 254
 8c4:	7f 4f       	sbci	r23, 0xFF	; 255
 8c6:	8f 4f       	sbci	r24, 0xFF	; 255
 8c8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ca:	af 4f       	sbci	r26, 0xFF	; 255
 8cc:	b1 e0       	ldi	r27, 0x01	; 1
 8ce:	3e d0       	rcall	.+124    	; 0x94c <__stack+0x4d>
 8d0:	b4 e0       	ldi	r27, 0x04	; 4
 8d2:	3c d0       	rcall	.+120    	; 0x94c <__stack+0x4d>
 8d4:	67 0f       	add	r22, r23
 8d6:	78 1f       	adc	r23, r24
 8d8:	89 1f       	adc	r24, r25
 8da:	9a 1f       	adc	r25, r26
 8dc:	a1 1d       	adc	r26, r1
 8de:	68 0f       	add	r22, r24
 8e0:	79 1f       	adc	r23, r25
 8e2:	8a 1f       	adc	r24, r26
 8e4:	91 1d       	adc	r25, r1
 8e6:	a1 1d       	adc	r26, r1
 8e8:	6a 0f       	add	r22, r26
 8ea:	71 1d       	adc	r23, r1
 8ec:	81 1d       	adc	r24, r1
 8ee:	91 1d       	adc	r25, r1
 8f0:	a1 1d       	adc	r26, r1
 8f2:	20 d0       	rcall	.+64     	; 0x934 <__stack+0x35>
 8f4:	09 f4       	brne	.+2      	; 0x8f8 <__ultoa_invert+0x48>
 8f6:	68 94       	set
 8f8:	3f 91       	pop	r19
 8fa:	2a e0       	ldi	r18, 0x0A	; 10
 8fc:	26 9f       	mul	r18, r22
 8fe:	11 24       	eor	r1, r1
 900:	30 19       	sub	r19, r0
 902:	30 5d       	subi	r19, 0xD0	; 208
 904:	31 93       	st	Z+, r19
 906:	de f6       	brtc	.-74     	; 0x8be <__ultoa_invert+0xe>
 908:	cf 01       	movw	r24, r30
 90a:	08 95       	ret
 90c:	46 2f       	mov	r20, r22
 90e:	47 70       	andi	r20, 0x07	; 7
 910:	40 5d       	subi	r20, 0xD0	; 208
 912:	41 93       	st	Z+, r20
 914:	b3 e0       	ldi	r27, 0x03	; 3
 916:	0f d0       	rcall	.+30     	; 0x936 <__stack+0x37>
 918:	c9 f7       	brne	.-14     	; 0x90c <__stack+0xd>
 91a:	f6 cf       	rjmp	.-20     	; 0x908 <__stack+0x9>
 91c:	46 2f       	mov	r20, r22
 91e:	4f 70       	andi	r20, 0x0F	; 15
 920:	40 5d       	subi	r20, 0xD0	; 208
 922:	4a 33       	cpi	r20, 0x3A	; 58
 924:	18 f0       	brcs	.+6      	; 0x92c <__stack+0x2d>
 926:	49 5d       	subi	r20, 0xD9	; 217
 928:	31 fd       	sbrc	r19, 1
 92a:	40 52       	subi	r20, 0x20	; 32
 92c:	41 93       	st	Z+, r20
 92e:	02 d0       	rcall	.+4      	; 0x934 <__stack+0x35>
 930:	a9 f7       	brne	.-22     	; 0x91c <__stack+0x1d>
 932:	ea cf       	rjmp	.-44     	; 0x908 <__stack+0x9>
 934:	b4 e0       	ldi	r27, 0x04	; 4
 936:	a6 95       	lsr	r26
 938:	97 95       	ror	r25
 93a:	87 95       	ror	r24
 93c:	77 95       	ror	r23
 93e:	67 95       	ror	r22
 940:	ba 95       	dec	r27
 942:	c9 f7       	brne	.-14     	; 0x936 <__stack+0x37>
 944:	00 97       	sbiw	r24, 0x00	; 0
 946:	61 05       	cpc	r22, r1
 948:	71 05       	cpc	r23, r1
 94a:	08 95       	ret
 94c:	9b 01       	movw	r18, r22
 94e:	ac 01       	movw	r20, r24
 950:	0a 2e       	mov	r0, r26
 952:	06 94       	lsr	r0
 954:	57 95       	ror	r21
 956:	47 95       	ror	r20
 958:	37 95       	ror	r19
 95a:	27 95       	ror	r18
 95c:	ba 95       	dec	r27
 95e:	c9 f7       	brne	.-14     	; 0x952 <__stack+0x53>
 960:	62 0f       	add	r22, r18
 962:	73 1f       	adc	r23, r19
 964:	84 1f       	adc	r24, r20
 966:	95 1f       	adc	r25, r21
 968:	a0 1d       	adc	r26, r0
 96a:	08 95       	ret

0000096c <__prologue_saves__>:
 96c:	2f 92       	push	r2
 96e:	3f 92       	push	r3
 970:	4f 92       	push	r4
 972:	5f 92       	push	r5
 974:	6f 92       	push	r6
 976:	7f 92       	push	r7
 978:	8f 92       	push	r8
 97a:	9f 92       	push	r9
 97c:	af 92       	push	r10
 97e:	bf 92       	push	r11
 980:	cf 92       	push	r12
 982:	df 92       	push	r13
 984:	ef 92       	push	r14
 986:	ff 92       	push	r15
 988:	0f 93       	push	r16
 98a:	1f 93       	push	r17
 98c:	cf 93       	push	r28
 98e:	df 93       	push	r29
 990:	cd b7       	in	r28, 0x3d	; 61
 992:	de b7       	in	r29, 0x3e	; 62
 994:	ca 1b       	sub	r28, r26
 996:	db 0b       	sbc	r29, r27
 998:	0f b6       	in	r0, 0x3f	; 63
 99a:	f8 94       	cli
 99c:	de bf       	out	0x3e, r29	; 62
 99e:	0f be       	out	0x3f, r0	; 63
 9a0:	cd bf       	out	0x3d, r28	; 61
 9a2:	09 94       	ijmp

000009a4 <__epilogue_restores__>:
 9a4:	2a 88       	ldd	r2, Y+18	; 0x12
 9a6:	39 88       	ldd	r3, Y+17	; 0x11
 9a8:	48 88       	ldd	r4, Y+16	; 0x10
 9aa:	5f 84       	ldd	r5, Y+15	; 0x0f
 9ac:	6e 84       	ldd	r6, Y+14	; 0x0e
 9ae:	7d 84       	ldd	r7, Y+13	; 0x0d
 9b0:	8c 84       	ldd	r8, Y+12	; 0x0c
 9b2:	9b 84       	ldd	r9, Y+11	; 0x0b
 9b4:	aa 84       	ldd	r10, Y+10	; 0x0a
 9b6:	b9 84       	ldd	r11, Y+9	; 0x09
 9b8:	c8 84       	ldd	r12, Y+8	; 0x08
 9ba:	df 80       	ldd	r13, Y+7	; 0x07
 9bc:	ee 80       	ldd	r14, Y+6	; 0x06
 9be:	fd 80       	ldd	r15, Y+5	; 0x05
 9c0:	0c 81       	ldd	r16, Y+4	; 0x04
 9c2:	1b 81       	ldd	r17, Y+3	; 0x03
 9c4:	aa 81       	ldd	r26, Y+2	; 0x02
 9c6:	b9 81       	ldd	r27, Y+1	; 0x01
 9c8:	ce 0f       	add	r28, r30
 9ca:	d1 1d       	adc	r29, r1
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	f8 94       	cli
 9d0:	de bf       	out	0x3e, r29	; 62
 9d2:	0f be       	out	0x3f, r0	; 63
 9d4:	cd bf       	out	0x3d, r28	; 61
 9d6:	ed 01       	movw	r28, r26
 9d8:	08 95       	ret

000009da <_exit>:
 9da:	f8 94       	cli

000009dc <__stop_program>:
 9dc:	ff cf       	rjmp	.-2      	; 0x9dc <__stop_program>
